spring.application.name=microstamp-api-gateway
server.port=9191
eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/

management.endpoints.web.exposure.include=*

# We can use this feature to avoid the manually configure the routes in application.properties. To do so, we need to enable the discovery locator
# spring.cloud.gateway.discovery.locator.enabled=true

# This property is pretty useful because this property will convert all the uppercase letter into lowercase.
#So sometime we configure the service ID or application name in uppercase, and this ID will help us
#to convert the uppercase into lowercase.
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Enable the logging for this API gateway so that we can
# see the mapping routes.
#logging.level.org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping=DEBUG

#Routes for microstamp-step1-backend-pagliares microservice
spring.cloud.gateway.routes[0].id=STEP1-MICROSERVICE-PAGLIARES

# Instead of lb://STEP1-MICROSERVICE-PAGLIARES we can use http://localhost:8081
# But if we need to use the inbuilt load balancer on this Netflix server, then we should have to provide
#the load balancing URL.
# Just remember if we need to use an in-built load balancer on a Eureka server, then we
# have to provide a load balancer in the URL
#L.B. stands for Load balancer and then followed by the service registry service ID.
spring.cloud.gateway.routes[0].uri=lb://STEP1-MICROSERVICE-PAGLIARES

# The path comes from the Controller mapping base URI
# @RequestMapping("api/system-safety-constraints")
# public class  SystemSafetyConstraintController  {
#   ..
# }
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/system-safety-constraints/**

# http://localhost:9191/api/system-safety-constraints  -> http://localhost:8081/api/system-safety-constraints


#Routes for microstamp-step2-backend-pagliares microservice
spring.cloud.gateway.routes[1].id=STEP2-MICROSERVICE-PAGLIARES
spring.cloud.gateway.routes[1].uri=lb://STEP2-MICROSERVICE-PAGLIARES
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/responsibilities/**

#which approach should I use?
# Whether I need to create the routes manually or I need to use
# Spring Cloud API Gateway provided discovery
# locator feature to automatically create the routes.
#
# Well, you can use your Spring Cloud API Gateway provided discovery locator
# to automatically create the routes.
# But the concern here is you need to include, you know, the application name or the service ID in the
# URL.
#
# If you are working with adding the service ID or application name in the URL, then you can go
# ahead and use this approach.
#
# Otherwise you can configure the routes manually.
# I think I prefer not to clutter the URL, so I typically configure the
# routes manually.
